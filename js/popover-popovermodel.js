var PopoverModel = (function () {
    function PopoverModel() {
        var _this = this;
        this.downloadStationConfigured = ko.observable(false);
        this.loggedIn = ko.observable(false);
        this.statusMessage = ko.observable();
        this.deviceName = ko.observable();
        this.dsmVersion = ko.observable();
        this.dsmVersionString = ko.observable();
        this.fullUrl = ko.observable();
        this.tasks = ko.observableArray();
        this.urlInput = ko.observable();
        this.urlInputValue = ko.computed(function () {
            var value = $.trim(_this.urlInput());
            return value.length == 0 ? null : value;
        });
        this.statusMessageLocalized = ko.computed(function () {
            if (typeof _this.statusMessage() !== "string")
                return null;
            else if (_this.statusMessage() == "dsmVersionTooOld") {
                return 'Your device seems to be running DSM ' + _this.dsmVersionString() + '-' + _this.dsmVersion() + '. This version is not supported anymore in this version of the extension. You can download an old version of this extension that supports DSM 4.1 and older from <a href="http://www.download-station-extension.com/" target="_blank">this website</a>.';
            }
            else {
                var localizedMessage = extension.getLocalizedString(_this.statusMessage());
                if (localizedMessage != _this.statusMessage())
                    return localizedMessage;
                return extension.getLocalizedString("api_error_" + _this.statusMessage());
            }
        });
        this.visibleTasks = ko.computed(function () {
            return ko.utils.arrayFilter(_this.tasks(), function (task) {
                return task.visible();
            });
        });
        this.pausebleTasks = ko.computed(function () {
            return ko.utils.arrayFilter(_this.visibleTasks(), function (task) {
                return task.pauseButtonVisible();
            });
        });
        this.resumebleTasks = ko.computed(function () {
            return ko.utils.arrayFilter(_this.visibleTasks(), function (task) {
                return task.resumeButtonVisible();
            });
        });
        this.finishedTasks = ko.computed(function () {
            return ko.utils.arrayFilter(_this.tasks(), function (task) {
                return task.status() == "finished";
            });
        });
        this.totalDownloadSpeed = ko.computed(function () {
            var tasks = _this.tasks();
            var speed = 0;
            for (var i = 0; i < tasks.length; i++) {
                if (tasks[i].status() != "paused")
                    speed += tasks[i].speedDownload();
            }
            return speed;
        });
        this.totalDownloadSpeedString = ko.computed(function () {
            return bytesToString(_this.totalDownloadSpeed()) + "/s";
        });
        this.totalUploadSpeed = ko.computed(function () {
            var tasks = _this.tasks();
            var speed = 0;
            for (var i = 0; i < tasks.length; i++) {
                if (tasks[i].status() != "paused")
                    speed += tasks[i].speedUpload();
            }
            return speed;
        });
        this.totalUploadSpeedString = ko.computed(function () {
            return bytesToString(_this.totalUploadSpeed()) + "/s";
        });
        this.formDisabled = ko.observable(false);
        this.newTaskErrorMessage = ko.observable();
        this.hideSeedingTorrents = ko.observable(false);
        this.clearingFinishedTasks = ko.observable(false);
    }
    PopoverModel.prototype.maxNumberOfTasksWarning = function () {
        return extension.getLocalizedString("maxNumberOfTasksWarning", ["100"]);
    };
    PopoverModel.prototype.clearFinishedTasks = function (item, event) {
        var _this = this;
        if ($(event.target).hasClass("disabled"))
            return;
        this.clearingFinishedTasks(true);
        var tasks = this.finishedTasks();
        for (var i = 0; i < tasks.length; i++) {
            tasks[i].removed(true);
        }
        getBackgroundPage().clearFinishedTasks(function (success, data) {
            _this.clearingFinishedTasks(false);
            if (success == false) {
                for (var i = 0; i < tasks.length; i++) {
                    tasks[i].removed(false);
                }
            }
        });
    };
    PopoverModel.prototype.addTask = function () {
        var _this = this;
        if (this.urlInputValue()) {
            this.formDisabled(true);
            this.newTaskErrorMessage(null);
            $(".url-input").blur();
            getBackgroundPage().createTask(this.urlInputValue(), null, null, null, function (success, data) {
                _this.formDisabled(false);
                if (success === true) {
                    _this.urlInput(null);
                    _this.toggleTaskForm(false);
                }
                else {
                    _this.newTaskErrorMessage(extension.getLocalizedString("api_error_" + data));
                    $(".url-input").focus();
                }
            });
            _gaq.push(['_trackEvent', 'Button', 'Popover AddTaskSubmit']);
        }
    };
    ;
    PopoverModel.prototype.hideTaskElement = function (elem) {
        if (elem.nodeType === 1) {
            $(elem).addClass('hidden');
            setTimeout(function () { $(elem).remove(); }, 500);
        }
    };
    ;
    PopoverModel.prototype.showTaskElement = function (elem, index, value) {
        if (elem.nodeType === 1) {
            $(elem).hide().fadeIn(100);
        }
    };
    ;
    PopoverModel.prototype.resumeAll = function (item, event) {
        if ($(event.target).hasClass("disabled"))
            return;
        var tasks = ko.utils.arrayFilter(this.visibleTasks(), function (task) {
            return task.status() != "finished";
        });
        var ids = new Array();
        $(event.target).addClass("disabled");
        for (var i = 0; i < tasks.length; i++) {
            var task = tasks[i];
            if (!task.resuming()) {
                task.resuming(true);
                ids.push(task.id());
            }
        }
        getBackgroundPage().resumeTask(ids, function (success) {
            $(event.target).removeClass("disabled");
            for (var i = 0; i < tasks.length; i++) {
                var task = tasks[i];
                task.resuming(false);
                if (success) {
                    task.status("waiting");
                }
            }
        });
    };
    ;
    PopoverModel.prototype.pauseAll = function (item, event) {
        if ($(event.target).hasClass("disabled"))
            return;
        var tasks = this.pausebleTasks();
        var ids = new Array();
        $(event.target).addClass("disabled");
        for (var i = 0; i < tasks.length; i++) {
            var task = tasks[i];
            if (!task.pausing()) {
                task.pausing(true);
                ids.push(task.id());
            }
        }
        getBackgroundPage().pauseTask(ids, function (success) {
            $(event.target).removeClass("disabled");
            for (var i = 0; i < tasks.length; i++) {
                var task = tasks[i];
                task.pausing(false);
                if (success) {
                    task.status("paused");
                }
            }
        });
    };
    ;
    PopoverModel.prototype.openSettings = function () {
        extension.createTab("options.html");
        extension.hidePopovers();
        _gaq.push(['_trackEvent', 'Button', 'Popover OpenOptionsTab']);
    };
    ;
    PopoverModel.prototype.toggleTaskForm = function (visible) {
        if (typeof visible === "boolean")
            $(".new-task").toggleClass("active", visible);
        else
            $(".new-task").toggleClass("active");
        if ($(".new-task").hasClass("active"))
            $(".url-input").focus();
        else
            $(".url-input").blur();
    };
    ;
    PopoverModel.prototype.openDownloadStation = function () {
        if (this.fullUrl() != null) {
            var url = this.fullUrl();
            if (this.dsmVersion() < 7000)
                url += "/webman/index.cgi?launchApp=SYNO.SDS.DownloadStation.Application";
            else
                url += "/index.cgi?launchApp=SYNO.SDS.DownloadStation.Application";
            extension.createTab(url);
            extension.hidePopovers();
            _gaq.push(['_trackEvent', 'Button', 'Popover OpenDownloadStationTab']);
        }
    };
    ;
    PopoverModel.prototype.localizedString = function (name, substitutions) {
        return extension.getLocalizedString(name, substitutions);
    };
    ;
    return PopoverModel;
}());

//# sourceMappingURL=data:application/json;base64,
