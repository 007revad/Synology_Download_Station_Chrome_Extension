/// <reference path="../../typings/index.d.ts"/>
var _this = this;
var textDirection = "ltr";
var _gaq = _gaq || [];
_gaq.push(['_setAccount', ANALYTICS_ID]);
_gaq.push(['_trackPageview']);
(function () {
    var ga = document.createElement('script');
    ga.type = 'text/javascript';
    ga.async = true;
    ga.src = 'https://ssl.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(ga, s);
})();
window.addEventListener('load', function load() {
    window.removeEventListener('load', load, false);
    document.body.classList.remove('load');
}, false);
var taskMapping = {
    create: function (item) {
        return new TaskModel(item.data);
    },
    key: function (item) {
        return ko.utils.unwrapObservable(item.id);
    }
};
var viewModel = new PopoverModel();
var popoverVisible = false;
var safariPopoverObject;
try {
    var deviceInfo = getBackgroundPage().getDeviceInfo();
    updateDeviceInfo(deviceInfo);
    if (deviceInfo != null) {
        var tasks = getBackgroundPage().getTasks();
        updateTasks(tasks);
    }
    if (extension.getLocalizedString("textDirection") == "rtl") {
        textDirection = "rtl";
        $(document.body).removeClass("ltr").addClass("rtl");
    }
    extension.storage.get("hideSeedingTorrents", function (storageItems) {
        viewModel.hideSeedingTorrents(storageItems["hideSeedingTorrents"] === true);
    });
    ko.applyBindings(viewModel);
    $(document.body).show();
    extension.onPopoverVisible(function () {
        popoverVisible = true;
        getBackgroundPage().setUpdateInterval(3);
        var tasks = getBackgroundPage().getTasks();
        updateTasks(tasks);
    }, "statusPopover");
    extension.onPopoverHidden(function () {
        popoverVisible = false;
        getBackgroundPage().setUpdateInterval();
        viewModel.toggleTaskForm(false);
    }, "statusPopover");
    $(document).on("click", "a[href][target='_blank']", function (event) {
        event.preventDefault();
        var url = $(_this).prop("href");
        extension.createTab(url);
        extension.hidePopovers();
        _gaq.push(['_trackEvent', 'Button', 'Popover link', url]);
    });
    updatePopoverSize();
}
catch (exc) {
    var bgPage = extension.getBackgroundPage();
    if (bgPage != null)
        bgPage.console.log(exc);
    location.reload(true);
}
;
function getBackgroundPage() {
    return extension.getBackgroundPage();
}
function updateDeviceInfo(info) {
    if (info !== null) {
        viewModel.deviceName(info.deviceName);
        viewModel.dsmVersion(info.dsmVersion);
        viewModel.dsmVersionString(info.dsmVersionString);
        viewModel.fullUrl(info.fullUrl);
        viewModel.loggedIn(info.loggedIn);
        viewModel.downloadStationConfigured(true);
        viewModel.statusMessage(info.status);
    }
    else {
        viewModel.downloadStationConfigured(false);
    }
}
function updateTasks(tasks) {
    if (!popoverVisible)
        return;
    // Re-create array to avoid problems with knockout mapping
    var taskArray = new Array();
    for (var i = 0; i < tasks.length; i++) {
        taskArray.push(tasks[i]);
    }
    ko.mapping.fromJS(taskArray, taskMapping, viewModel.tasks);
}
function updatePopoverSize() {
    // Only for Safari, Chrome uses the document height
    if (IS_SAFARI) {
        var updateSizeFunction = function () {
            if (!safariPopoverObject) {
                safariPopoverObject = extension.getSafariPopoverObject("statusPopover");
            }
            if (safariPopoverObject) {
                safariPopoverObject.height = document.body.offsetHeight;
                safariPopoverObject.width = document.body.offsetWidth;
            }
        };
        var updateSizeInterval;
        extension.onPopoverVisible(function () {
            updateSizeInterval = setInterval(updateSizeFunction, 50);
            updateSizeFunction();
        }, "statusPopover");
        extension.onPopoverHidden(function () {
            clearInterval(updateSizeInterval);
        }, "statusPopover");
    }
}
function bytesToString(bytes) {
    var bytes = parseInt(bytes);
    var KILOBYTE = 1024;
    var MEGABYTE = KILOBYTE * 1024;
    var GIGABYTE = MEGABYTE * 1024;
    var TERABYTE = GIGABYTE * 1024;
    if (isNaN(bytes)) {
        return "0";
    }
    if (bytes < KILOBYTE) {
        return Math.round(bytes * 100) / 100 + ' B';
    }
    else if (bytes < MEGABYTE) {
        return Math.round(bytes / KILOBYTE * 100) / 100 + ' KB';
    }
    else if (bytes < GIGABYTE) {
        return Math.round(bytes / MEGABYTE * 100) / 100 + ' MB';
    }
    else if (bytes < TERABYTE) {
        return Math.round(bytes / GIGABYTE * 100) / 100 + ' GB';
    }
    else {
        return Math.round(bytes / TERABYTE * 100) / 100 + ' TB';
    }
}

//# sourceMappingURL=data:application/json;base64,
